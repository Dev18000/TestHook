@page "/planning"
@using Microsoft.AspNetCore.SignalR.Client
@using TestHook.Data
@using TestHook.Services

<p>Planning Data:</p>

@if (updates != null && updates.Any())
{
    @foreach (var data in updates)
    {
        <div>
            <strong>Name:</strong> @data.Name <br />
            <strong>Age:</strong> @data.Age
        </div>
    }
}
else
{
    <p>No data available</p>
}

@code {
    private List<SimpleDataForHookTest> updates;
    private HubConnection hubConnection;
    private bool isConnected;

    [Inject]
    public ISubscriptionService SubscriptionService { get; set; }

    [Inject]
    public IHookService HookService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("")) // Ваш URL для хаба
            .Build();

        // Обрабатываем обновления
        hubConnection.On<IEnumerable<SimpleDataForHookTest>>("ReceiveUpdate", (data) =>
      {
          if (data != null && data.Any())
          {
              updates = data.ToList();
              InvokeAsync(StateHasChanged);
          }
          else
          {
              Console.WriteLine("No data received or data is empty");
          }
      });

        // Обрабатываем событие закрытия соединения
        hubConnection.Closed += async (error) =>
        {
            isConnected = false;
            Console.WriteLine($"Connection closed. Error: {error?.Message}");
            await Task.Delay(new Random().Next(0, 5) * 1000); // Подождите перед повторной попыткой подключения
            await ConnectWithRetryAsync();
        };

        await ConnectWithRetryAsync();

        HookService.Register(ReceivePlanningData);
    }

    private async Task ConnectWithRetryAsync()
    {
        try
        {
            await hubConnection.StartAsync();
            isConnected = true;
            Console.WriteLine("Connected to the hub.");

            // Отправка запроса на подписку
            await hubConnection.SendAsync("Subscribe", ""); // URL вебхука
        }
        catch (Exception ex)
        {
            isConnected = false;
            Console.WriteLine($"Failed to connect: {ex.Message}");
        }
    }

    private void ReceivePlanningData(IEnumerable<SimpleDataForHookTest> planningListDto)
    {
        if (planningListDto != null && planningListDto.Any())
        {
            updates = planningListDto.ToList();
            Console.WriteLine("Received planning data.");
            InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine("No data received from hook");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (isConnected)
        {
            await hubConnection.SendAsync("Unsubscribe");
        }
        HookService.UnRegister(ReceivePlanningData);
        await hubConnection.DisposeAsync();
    }
}
