@page "/planning"
@using Microsoft.AspNetCore.SignalR.Client
@using TestHook.Data
@using TestHook.Services

<p>Planning Data:</p>

@if (updates != null && updates.Any())
{
    @foreach (var data in updates)
    {
        <div>
            <strong>Name:</strong> @data.Name <br />
            <strong>Age:</strong> @data.Age
        </div>
    }
}
else
{
    <p>No data available</p>
}

@code {
    private List<SimpleDataForHookTest> updates;
    private HubConnection hubConnection;
    private bool isConnected;

    [Inject]
    public ISubscriptionService SubscriptionService { get; set; }

    [Inject]
    public IHookService HookService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize the SignalR Hub connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("")) // Your Hub URL
            .Build();

        // Handling received updates from the Hub
        hubConnection.On<IEnumerable<SimpleDataForHookTest>>("ReceiveUpdate", (data) =>
        {
            if (data != null && data.Any())
            {
                updates = data.ToList();
                InvokeAsync(StateHasChanged); // Trigger re-rendering when data is received
            }
            else
            {
                Console.WriteLine("No data received or data is empty");
            }
        });

        // Handling when the connection is closed and try reconnecting
        hubConnection.Closed += async (error) =>
        {
            isConnected = false;
            Console.WriteLine($"Connection closed. Error: {error?.Message}");
            await Task.Delay(new Random().Next(0, 5) * 1000); // Wait before retrying connection
            await ConnectWithRetryAsync(); // Retry connecting
        };

        await ConnectWithRetryAsync(); // Connect initially when the component initializes

        // Register for data notifications through HookService
        HookService.Register(ReceivePlanningData);
    }

    private async Task ConnectWithRetryAsync()
    {
        try
        {
            // Attempt to start the connection
            await hubConnection.StartAsync();
            isConnected = true;
            Console.WriteLine("Connected to the hub.");

            // Send a subscription request to the Hub
            await hubConnection.SendAsync("Subscribe", ""); // Your WebHook URL
        }
        catch (Exception ex)
        {
            isConnected = false;
            Console.WriteLine($"Failed to connect: {ex.Message}");
        }
    }

    // This method is invoked when new data is received from the hook
    private void ReceivePlanningData(IEnumerable<SimpleDataForHookTest> planningListDto)
    {
        if (planningListDto != null && planningListDto.Any())
        {
            updates = planningListDto.ToList();
            Console.WriteLine("Received planning data.");
            InvokeAsync(StateHasChanged); // Update the UI with the new data
        }
        else
        {
            Console.WriteLine("No data received from hook");
        }
    }

    // Clean up and disconnect the Hub connection when the component is disposed
    public async ValueTask DisposeAsync()
    {
        if (isConnected)
        {
            await hubConnection.SendAsync("Unsubscribe"); // Unsubscribe from the Hub
        }
        HookService.UnRegister(ReceivePlanningData); // Unregister the data handler
        await hubConnection.DisposeAsync(); // Dispose of the Hub connection
    }
}
